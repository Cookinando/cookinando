import { body, param, ValidationChain } from 'express-validator';    
import { Op } from 'sequelize';
import User from '../../models/userModel';
    
export const validateLogIn: ValidationChain[] = [

    body('username')
        .notEmpty().withMessage('游뚿El nombre de usuario es obligatorio游뚿')
        .isString().withMessage('游뚿El nombre de usuario debe ser un texto游뚿')
        .custom(async (value: string) => {
            const userName = await User.findOne({ where: { username: value } });
            if (!userName) {
                throw new Error('游뚿El usuario no existe游뚿');
            }
            return true;
        }),

    body('password')
        .notEmpty().withMessage('游뚿La contrase침a es obligatoria游뚿')
        .isString().withMessage('游뚿La contrase침a debe ser un texto游뚿'),
        //falta a침adir la comparaci칩n entre contrse침as con bcrypt

    // body('email')
    //     .notEmpty().withMessage('游뚿El email es obligatorios游뚿')
    //     .isString().withMessage('游뚿Los tags deben ser un texto游뚿')
    //     .isEmail().withMessage('游뚿El email debe ser un correo v치lido游뚿')
    //     .normalizeEmail()
    //     .custom(async (value: string) => {
    //         const userEmail = await User.findOne({ where: { email: value } });
    //         if (!userEmail) {
    //             throw new Error('游뚿El usuario no existe游뚿');
    //         }
    //         return true;
    //     }),
  ];

export const validateSignUp: ValidationChain[] = [

    body('username')
        .notEmpty().withMessage('游뚿El nombre es obligatorio游뚿')
        .isString().withMessage('游뚿El nombre debe ser un texto游뚿'),

    body('password')
        .notEmpty().withMessage('游뚿La contrase침a es obligatoria游뚿')
        .isString().withMessage('游뚿La contrase침a debe ser un texto游뚿')
        .isLength({ min: 8 }).withMessage('游뚿La contrase침a debe tener al menos 8 caracteres游뚿'),

    body('email')
        .notEmpty().withMessage('游뚿El email es obligatorio游뚿')
        .isString().withMessage('游뚿Los tags deben ser un texto游뚿')
        .isEmail().withMessage('游뚿El email debe ser un correo v치lido游뚿')
        .normalizeEmail() //esto sirve para convertir el email en min칰sculas, quitarle los espacios, quitarle los caracteres especiales, etc.   
        .custom(async (value) => { //.custom te permite a침adir una funci칩n personalizada que no pertenece al m칠todo de express-validator
            const existingUser = await User.findOne({ where: { email: value } });
                if (existingUser) {
                    throw new Error('游뚿Este email ya est치 en uso游뚿');
                }
                return true;
            }),
  ];

export const validateUpdateProfile: ValidationChain[] = [

    body('username')
        .notEmpty().withMessage('游뚿El nombre es obligatorio游뚿')
        .isString().withMessage('游뚿El nombre debe ser un texto游뚿')
        .custom(async (value, { req }) => {
            const userId = req.params?.id;
                if (!userId) {
                    throw new Error('游뚿El ID del usuario no existe游뚿');
                }
    
            const updateUserName = await User.findOne({ 
                where: { 
                    username: value, 
                    id: { [Op.ne]: userId } } });
    
            if (updateUserName) {
                return Promise.reject('游뚿Este nombre de usuario ya est치 en uso游뚿');
            }
                return true; // es una buena pr치ctica devolver true si no hay errores
            }),

    body('email')
        .notEmpty().withMessage('游뚿El email es obligatorio游뚿')
        .isString().withMessage('游뚿El email debe ser un texto游뚿')
        .isEmail().withMessage('游뚿El email debe ser un correo v치lido游뚿')
        .normalizeEmail()
        .custom(async (value, { req }) => {
            const userId = req.params?.id;
                if (!userId) {
                    throw new Error('游뚿El ID del usuario no existe游뚿');
                }

            const updatedEmail = await User.findOne({ 
                where: { 
                    email: value, 
                    id: { [Op.ne]: userId } } });

            if (updatedEmail) {
                return Promise.reject('游뚿El correo electr칩nico ya est치 en uso游뚿');
            }
                return true; // es una buena pr치ctica devolver true si no hay errores
            }),

    body('password')
            .notEmpty().withMessage('游뚿La contrase침a es obligatoria游뚿')
            .isString().withMessage('游뚿La contrase침a debe ser un texto游뚿')
            .isLength({ min: 8 }).withMessage('游뚿La contrase침a debe tener al menos 8 caracteres游뚿'),
  ];