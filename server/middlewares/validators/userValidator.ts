import { body } from 'express-validator';    
import { Op } from 'sequelize';
import User from '../../models/userModel';
import { validate } from './handleValidator';
import { Request, Response, NextFunction } from 'express';
    
export const validateLogIn = [

    body('password')
        .notEmpty().withMessage('游뚿La contrase침a es obligatoria游뚿')
        .isString().withMessage('游뚿La contrase침a debe ser un texto游뚿'),

    body('email')
        .notEmpty().withMessage('游뚿El email es obligatorios游뚿')
        .isString().withMessage('游뚿Los tags deben ser un texto游뚿')
        .isEmail().withMessage('游뚿El email debe ser un correo v치lido游뚿')
        .normalizeEmail()
        .custom(async (value: string) => {
            const userEmail = await User.findOne({ where: { email: value } });
            if (!userEmail) {
                throw new Error('游뚿El usuario no existe游뚿');
            }
            return true; 
        }),
    (req: Request, res: Response, next: NextFunction) => validate(req, res, next)
  ];

export const validateSignUp = [

    body('username')
        .notEmpty().withMessage('游뚿El nombre es obligatorio游뚿')
        .isString().withMessage('游뚿El nombre debe ser un texto游뚿')
        .custom(async (value) => { //.custom te permite a침adir una funci칩n personalizada que no pertenece al m칠todo de express-validator
            const existingUser = await User.findOne({ where: { username: value } });
                if (existingUser) {
                    throw new Error('游뚿Este username ya est치 en uso游뚿');
                }
                return true; // es una buena pr치ctica devolver true si no hay errores
            }),

    body('password')
        .notEmpty().withMessage('游뚿La contrase침a es obligatoria游뚿')
        .isString().withMessage('游뚿La contrase침a debe ser un texto游뚿')
        .isLength({ min: 8 }).withMessage('游뚿La contrase침a debe tener al menos 8 caracteres游뚿'),

    body('email')
        .notEmpty().withMessage('游뚿El email es obligatorio游뚿')
        .isString().withMessage('游뚿El email debe ser un texto游뚿')
        .isEmail().withMessage('游뚿El email debe ser un correo v치lido游뚿')
        .normalizeEmail() //esto sirve para convertir el email en min칰sculas, quitarle los espacios, quitarle los caracteres especiales, etc.   
        .custom(async (value) => { //.custom te permite a침adir una funci칩n personalizada que no pertenece al m칠todo de express-validator
            const existingUser = await User.findOne({ where: { email: value } });
                if (existingUser) {
                    throw new Error('游뚿Este email ya est치 en uso游뚿');
                }
                return true; // es una buena pr치ctica devolver true si no hay errores
            }),
    (req: Request, res: Response, next: NextFunction) => validate(req, res, next)
  ];

  export const validateUpdateProfile = [

    body('username')
        .optional()
        .isString().withMessage('游뚿El nombre debe ser un texto游뚿')
        .custom(async (value, { req }) => {
            const userId = req.user?.id; // Extrae el ID del usuario desde req.user

            if (!userId) {
                throw new Error('游뚿El ID del usuario no existe en el token游뚿');
            }

            const existingUser = await User.findOne({
                where: {
                    username: value,
                    id: { [Op.ne]: userId }
                }
            });

            if (existingUser) {
                return Promise.reject('游뚿Este nombre de usuario ya est치 en uso游뚿');
            }

            return true; // Devuelve true si no hay errores
        }),

    body('email')
        .optional()
        .isString().withMessage('游뚿El email debe ser un texto游뚿')
        .isEmail().withMessage('游뚿El email debe ser un correo v치lido游뚿')
        .normalizeEmail()
        .custom(async (value, { req }) => {
            const userId = req.user?.id; // Extrae el ID del usuario desde req.user

            if (!userId) {
                throw new Error('游뚿El ID del usuario no existe en el token游뚿');
            }

            const existingEmail = await User.findOne({
                where: {
                    email: value,
                    id: { [Op.ne]: userId }
                }
            });

            if (existingEmail) {
                return Promise.reject('游뚿El correo electr칩nico ya est치 en uso游뚿');
            }

            return true; // Devuelve true si no hay errores
        }),

    body('password')
        .optional()
        .isString().withMessage('游뚿La contrase침a debe ser un texto游뚿')
        .isLength({ min: 8 }).withMessage('游뚿La contrase침a debe tener al menos 8 caracteres游뚿'),

    (req: Request, res: Response, next: NextFunction) => {
        validate(req, res, next);
    }
];