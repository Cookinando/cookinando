import { body, param } from 'express-validator';    
    
export const validateLogIn = [

    param('id')
        .isInt().withMessage('游뚿El ID debe ser un n칰mero entero游뚿')
        .notEmpty().withMessage('游뚿El ID es obligatorio游뚿')
        .custom(async (value) => {
            const usuario = await Usuario.findById(value); // Busca el usuario por ID
            if (!usuario) {
                throw new Error('游뚿El ID no existe en la base de datos游뚿');
            }
            return true; // Si el usuar2io existe, se retorna true
        }),

    body('username')
        .notEmpty().withMessage('游뚿El nombre es obligatorio游뚿')
        .isString().withMessage('游뚿El nombre debe ser un texto游뚿'),

    body('password')
        .notEmpty().withMessage('游뚿La contrase침a es obligatoria游뚿')
        .isString().withMessage('游뚿La contrase침a debe ser un texto游뚿'),
        //falta a침adir la comparaci칩n entre contrse침as con bcrypt

    body('email')
        .notEmpty().withMessage('游뚿El email es obligatorios游뚿')
        .isString().withMessage('游뚿Los tags deben ser un texto游뚿')
        .isEmail().withMessage('游뚿El email debe ser un correo v치lido游뚿')
        .normalizeEmail()
        .custom(async (value) => {
            const user = await User.findOne({ where: { email: value } });
            if (!user) {
                throw new Error('游뚿El usuario no existe游뚿');
            }
            return true;
        }),

    body('isAdmin')
        .isBoolean().withMessage('游뚿El campo isAdmin debe ser un verdadero o falso游뚿')
  ];

export const validateSignUp = [

    body('username')
        .notEmpty().withMessage('游뚿El nombre es obligatorio游뚿')
        .isString().withMessage('游뚿El nombre debe ser un texto游뚿'),

    body('password')
        .notEmpty().withMessage('游뚿La contrase침a es obligatoria游뚿')
        .isString().withMessage('游뚿La contrase침a debe ser un texto游뚿')
        .isLength({ min: 8 }).withMessage('游뚿La contrase침a debe tener al menos 8 caracteres游뚿'),

    body('email')
        .notEmpty().withMessage('游뚿El email es obligatorio游뚿')
        .isString().withMessage('游뚿Los tags deben ser un texto游뚿')
        .isEmail().withMessage('游뚿El email debe ser un correo v치lido游뚿')
        .normalizeEmail() //esto sirve para convertir el email en min칰sculas, quitarle los espacios, quitarle los caracteres especiales, etc.   
        .custom(async (value) => { //.custom te permite a침adir una funci칩n personalizada que no pertenece al m칠todo de express-validator
            const existingUser = await User.findOne({ where: { email: value } });
                if (existingUser) {
                    throw new Error('游뚿Este email ya est치 en uso游뚿');
                }
                return true;
            }),
    body('isAdmin')
         .isBoolean().withMessage('游뚿El campo isAdmin debe ser un verdadero o falso游뚿')
  ];

export const validateUpdateProfile = [
    param('id')
        .isInt().withMessage('游뚿El ID debe ser un n칰mero entero游뚿')
        .notEmpty().withMessage('游뚿El ID es obligatorio游뚿')
        .custom(async (value) => {
            const usuario = await Usuario.findById(value); // Busca el usuario por ID
            if (!usuario) {
                throw new Error('游뚿El ID no existe en la base de datos游뚿');
            }
            return true; // Si el usuario existe, se retorna true
        }),

    body('username')
        .notEmpty().withMessage('游뚿El nombre es obligatorio游뚿')
        .isString().withMessage('游뚿El nombre debe ser un texto游뚿'),

    body('email')
    .notEmpty().withMessage('游뚿El email es obligatorio游뚿')
    .isString().withMessage('游뚿Los tags deben ser un texto游뚿')
    .isEmail().withMessage('游뚿El email debe ser un correo v치lido游뚿')
    .normalizeEmail()
    .custom(async (value, { req }) => {
        const user = await User.findOne({ where: { email: value, id: { [Op.ne]: req.params.id } } });
        if (user) {
          return Promise.reject('游뚿El correo electr칩nico ya est치 en uso游뚿');
        }
        }),

        body('password')
            .notEmpty().withMessage('游뚿La contrase침a es obligatoria游뚿')
            .isString().withMessage('游뚿La contrase침a debe ser un texto游뚿')
            .isLength({ min: 8 }).withMessage('游뚿La contrase침a debe tener al menos 8 caracteres游뚿'),
            //falta a침adir la comparaci칩n entre contrse침as con bcrypt

        body('isAdmin')
        .isBoolean().withMessage('游뚿El campo isAdmin debe ser un verdadero o falso游뚿')
  ];